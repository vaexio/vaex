name: Build binary wheel

on:
  push:
    tags:
      - core-*
jobs:
  build_wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macOS-latest, windows-latest]
        python-version: [36, 37, 38, 39]

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Copy dll
      if: (matrix.os == 'windows-latest')
      uses: ./ci/actions/windll

    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: '3.7'

    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==1.10.0

    - name: Install twine/wheel
      run: |
        python -m pip install twine wheel

    - name: chores
      if: matrix.os != 'windows-latest'
      run: |
        mkdir dist
        mkdir packages/vaex-core/bin
        cp bin/install_pcre.sh packages/vaex-core/bin/

    - name: Build vaex-core (windows)
      if: (matrix.os == 'windows-latest')
      env:
        CIBW_BUILD: cp${{ matrix.python-version }}*64
        CIBW_ENVIRONMENT_LINUX: "CFLAGS='-Wl,-strip-all' CXXFLAGS='-Wl,-strip-all'"
      run: |
        python -m cibuildwheel --output-dir dist packages/vaex-core

    - name: Build vaex-core (linux, osx)
      if: (matrix.os != 'windows-latest')
      env:
        CIBW_BEFORE_BUILD: bin/install_pcre.sh
        CIBW_BUILD: "cp${{ matrix.python-version }}*64 cp${{ matrix.python-version }}-macosx-*"
        CIBW_ENVIRONMENT_LINUX: "CFLAGS='-Wl,-strip-all' CXXFLAGS='-Wl,-strip-all'"
        # needed for m1 builds
        CIBW_ENVIRONMENT_MACOS: "CFLAGS='-I/usr/local/include -L/usr/local/lib' CXXFLAGS='-I/usr/local/include -L/usr/local/lib' LDFLAGS='-L/usr/local/lib'"
        CIBW_ARCHS_MACOS: "universal2 x86_64 arm64"
      run: |
        python -m cibuildwheel --output-dir dist packages/vaex-core

    - name: Make source distribution
      shell: bash
      run: |
          cd packages/vaex-core && python setup.py sdist

    - name: Copy build artifacts
      shell: bash
      run: |
          cp packages/vaex-core/dist/* dist/

    - uses: actions/upload-artifact@v1
      with:
        name: distributions
        path: ./dist

    - name: Publish a Python distribution to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_password_vaex_core }}
      run: |
        twine upload --skip-existing dist/vaex?core*
